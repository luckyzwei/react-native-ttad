apply plugin: 'com.android.library'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def safeCfgGet(prop, fallback) {
    project.hasProperty(prop) ? project.getProperties().get(prop).trim() : fallback
}

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 28)
    buildToolsVersion safeExtGet('buildToolsVersion', "28.0.3")
    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 16)
        targetSdkVersion safeExtGet('targetSdkVersion', 28)
        versionCode 1
        versionName "1.0"
        consumerProguardFiles "proguard.pro"
    }

    lintOptions {
        abortOnError false
    }
}


dependencies {
    implementation 'com.facebook.react:react-native:+'
    implementation fileTree(dir: "libs", include: ["open_ad_sdk.aar"])

    // 若以下依赖冲突, 可自行在 app 项目中导入以下依赖
    // 并在 gradle.properties 添加 TTAD_READY=true 提过这里的集成
    // 默认情况, 为减少配置, 是直接导入的
    if (safeCfgGet("TTAD_READY", "false") != "true") {
        implementation 'com.android.support:support-v4:28.0.0'

        // 1.2.18 版本以下有漏洞: https://www.cnvd.org.cn/webinfo/show/5257
        // 但 1.2.15 版本以上要求 minSdkVersion 必须大于 16, 而 rn 默认是16
        // 所以这里选择权由 主工程设置的 minSdkVersion 来决定
        if (safeExtGet('minSdkVersion', 16) > 16) {
            implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.18'
        } else {
            implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.15'
        }
    }
}